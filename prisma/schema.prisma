generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum TaskStatus {
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum TaskType {
  MANUAL
  ADGEM
  ADSTERRA
  CPALEAD
}

enum ProofStatus {
  PENDING
  APPROVED
  REJECTED
}

enum WithdrawalStatus {
  PENDING
  PROCESSING
  COMPLETED
  REJECTED
}

enum TransactionType {
  SIGNUP_BONUS
  TASK_REWARD
  REFERRAL_BONUS
  LEVEL_UPGRADE
  WITHDRAWAL
  ADMIN_CREDIT
  ADMIN_DEBIT
}

enum LevelRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  email         String    @unique
  password      String
  fullName      String
  gender        String?
  birthdate     DateTime?
  role          UserRole  @default(USER)
  level         Int       @default(0)
  referralCode  String?   @unique
  isApproved    Boolean   @default(false)
  isSuspended   Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?

  wallet          Wallet?
  transactions    Transaction[]
  tasks           UserTask[]
  proofs          Proof[]
  referrals       Referral[]      @relation("Referrer")
  referredBy      Referral?       @relation("Referred")
  withdrawals     Withdrawal[]
  levelRequests   LevelRequest[]
  adminActions    AdminAction[]
  magicLinkTokens MagicLinkToken[]

  @@index([email])
  @@index([username])
  @@index([role])
}

model Wallet {
  id              String   @id @default(cuid())
  userId          String   @unique
  balance         Decimal  @default(0) @db.Decimal(10, 2)
  pendingBalance  Decimal  @default(0) @db.Decimal(10, 2)
  totalEarned     Decimal  @default(0) @db.Decimal(10, 2)
  totalWithdrawn  Decimal  @default(0) @db.Decimal(10, 2)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Transaction {
  id          String          @id @default(cuid())
  userId      String
  type        TransactionType
  amount      Decimal         @db.Decimal(10, 2)
  description String
  metadata    Json?
  createdAt   DateTime        @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

model Task {
  id                  String     @id @default(cuid())
  title               String
  description         String     @db.Text
  type                TaskType
  reward              Decimal    @db.Decimal(10, 2)
  instructions        String?    @db.Text
  url                 String?
  proofRequired       Boolean    @default(true)
  status              TaskStatus @default(ACTIVE)
  maxParticipants     Int?
  currentParticipants Int        @default(0)
  externalId          String?
  metadata            Json?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  userTasks UserTask[]
  proofs    Proof[]

  @@index([type])
  @@index([status])
}

model UserTask {
  id          String      @id @default(cuid())
  userId      String
  taskId      String
  status      ProofStatus @default(PENDING)
  reward      Decimal     @db.Decimal(10, 2)
  startedAt   DateTime    @default(now())
  completedAt DateTime?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  proofs Proof[]

  @@unique([userId, taskId])
  @@index([userId])
  @@index([taskId])
  @@index([status])
}

model Proof {
  id              String      @id @default(cuid())
  userId          String
  taskId          String
  userTaskId      String
  proofUrl        String?
  proofText       String?     @db.Text
  status          ProofStatus @default(PENDING)
  rejectionReason String?     @db.Text
  reviewedBy      String?
  reviewedAt      DateTime?
  createdAt       DateTime    @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  task     Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userTask UserTask @relation(fields: [userTaskId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([taskId])
  @@index([status])
}

model Offer {
  id          String   @id @default(cuid())
  externalId  String   @unique
  source      String
  title       String
  description String   @db.Text
  reward      Decimal  @db.Decimal(10, 2)
  url         String
  isActive    Boolean  @default(true)
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([source])
  @@index([isActive])
}

model Referral {
  id         String   @id @default(cuid())
  referrerId String
  referredId String   @unique
  level      Int
  bonus      Decimal  @db.Decimal(10, 2)
  isPaid     Boolean  @default(false)
  createdAt  DateTime @default(now())

  referrer User @relation("Referrer", fields: [referrerId], references: [id], onDelete: Cascade)
  referred User @relation("Referred", fields: [referredId], references: [id], onDelete: Cascade)

  @@index([referrerId])
  @@index([referredId])
}

model Withdrawal {
  id              String           @id @default(cuid())
  userId          String
  amount          Decimal          @db.Decimal(10, 2)
  usdtAmount      Decimal          @db.Decimal(10, 2)
  conversionRate  Decimal          @db.Decimal(10, 4)
  walletAddress   String
  network         String
  status          WithdrawalStatus @default(PENDING)
  txHash          String?
  rejectionReason String?          @db.Text
  processedBy     String?
  processedAt     DateTime?
  createdAt       DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

model PaymentMethod {
  id          String    @id @default(cuid())
  name        String
  type        String    // "Crypto", "Bank", "PayPal", etc.
  address     String    // Wallet address or account details
  network     String?   // Network for crypto payments
  qrCode      String?   // QR code image URL
  isActive    Boolean   @default(true)
  description String?   @db.Text
  metadata    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  levelRequests LevelRequest[]

  @@index([isActive])
}

model LevelRequest {
  id              String             @id @default(cuid())
  userId          String
  requestedLevel  Int
  proofUrl        String?
  paymentMethodId String?
  paymentTxHash   String?            // Transaction hash from user
  paymentAmount   Decimal?           @db.Decimal(10, 2)
  status          LevelRequestStatus @default(PENDING)
  rejectionReason String?            @db.Text
  reviewedBy      String?
  reviewedAt      DateTime?
  createdAt       DateTime           @default(now())

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentMethod PaymentMethod? @relation(fields: [paymentMethodId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([status])
  @@index([paymentMethodId])
}

model AdminAction {
  id          String   @id @default(cuid())
  adminId     String
  action      String
  targetType  String
  targetId    String
  description String   @db.Text
  metadata    Json?
  createdAt   DateTime @default(now())

  admin User @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId])
  @@index([targetType])
  @@index([createdAt])
}

model AdRevenue {
  id          String   @id @default(cuid())
  source      String
  date        DateTime
  revenue     Decimal  @db.Decimal(10, 2)
  impressions Int?
  clicks      Int?
  conversions Int?
  metadata    Json?
  createdAt   DateTime @default(now())

  @@unique([source, date])
  @@index([source])
  @@index([date])
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String   @db.Text
  updatedAt DateTime @updatedAt

  @@index([key])
}

model MagicLinkToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

